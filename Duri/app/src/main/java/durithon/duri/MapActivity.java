package durithon.duri;import android.app.FragmentManager;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.pm.PackageManager;import android.graphics.Color;import android.os.Bundle;import android.os.Handler;import android.os.Looper;import android.support.v4.app.ActivityCompat;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.TextView;import com.google.android.gms.maps.CameraUpdate;import com.google.android.gms.maps.CameraUpdateFactory;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.MapFragment;import com.google.android.gms.maps.OnMapReadyCallback;import com.google.android.gms.maps.model.LatLng;import com.google.android.gms.maps.model.Marker;import com.google.android.gms.maps.model.MarkerOptions;import com.google.android.gms.maps.model.PolylineOptions;import java.util.ArrayList;import java.util.Random;public class MapActivity extends AppCompatActivity implements OnMapReadyCallback {    TextView btn_map_history;    GoogleMap map ;    ArrayList<LatLng> routePoints;    Marker marker;    MyReceiver myReceiver;    static TextView heartbit;    static boolean isMapActivity =true ;    TextView heartheart;    boolean playflag = false;    Button playresume;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_map);        isMapActivity = true;        routePoints =new ArrayList<LatLng>();        final FragmentManager fragmentManager = getFragmentManager();        com.google.android.gms.maps.MapFragment mapFragment = (MapFragment) fragmentManager                .findFragmentById(R.id.map);        mapFragment.getMapAsync(this);        btn_map_history = (TextView) findViewById(R.id.btn_map_history);        btn_map_history.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                startActivity(new Intent(MapActivity.this, MapHistoryListActivity.class));            }        });/*        LinearLayout layout1=(LinearLayout)findViewById(R.id.walk_historys_layout);        layout1.setOnClickListener(new View.OnClickListener()        {            @Override            public void onClick(View v)            {                startActivity(new Intent(MapActivity.this, MapHistoryListActivity.class));            }        });        */        registerReceiver();        heartbit = (TextView) findViewById(R.id.textView);        heartheart = (TextView) findViewById(R.id.asdasfasfgdf);        playresume= (Button) findViewById(R.id.onoff_btn);        playresume.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if(playflag == false){                    playresume.setBackgroundResource(R.drawable.btn_play);                    SplashActivity.netty_duriClient.sendmessage("interestStop"+SplashActivity.ascii+1);                    playflag = true;                }else{                    playresume.setBackgroundResource(R.drawable.btn_pause_selector);                    SplashActivity.netty_duriClient.sendmessage("interestResume"+SplashActivity.ascii+1);                    playflag = false;                }            }        });        heartThread heartThread = new heartThread();        heartThread.start();    }    @Override    public void onMapReady(GoogleMap map) {        this.map = map;        LatLng SEOUL = new LatLng(37.56, 126.97);        MarkerOptions markerOptions = new MarkerOptions();        markerOptions.position(SEOUL);        markerOptions.title("서울");        markerOptions.snippet("한국의 수도");        map.addMarker(markerOptions);        map.moveCamera(CameraUpdateFactory.newLatLng(SEOUL));        map.animateCamera(CameraUpdateFactory.zoomTo(10));        if (ActivityCompat.checkSelfPermission((MapActivity.this), android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {            ActivityCompat.requestPermissions((MapActivity.this) , new String[]{                    android.Manifest.permission.ACCESS_FINE_LOCATION            }, 10);}        //mylocation버튼 활성화        map.setMyLocationEnabled(true);/*        ArrayList<LatLng> testArray =new ArrayList<LatLng>();        testArray.add(new LatLng(37.581501, 127.002482));        testArray.add(new LatLng(37.581305, 127.002493));        testArray.add(new LatLng(37.581305, 127.002493));        testArray.add(new LatLng(37.580888, 127.002418));        testArray.add(new LatLng(37.580607, 127.002375));        testArray.add(new LatLng(37.579440, 127.002363));        for (int i = 0; i<testArray.size();i++) {            display(testArray.get(i));        }        */    }    public void display(LatLng latLng ){        //현재 위치 정보 얻기        if (marker != null) {            marker.remove();        }        MarkerOptions markerOption = new MarkerOptions().position(latLng).title("Hello Duriton ");        //카메라 업데이트 최근 좌표로 설정, 카메라 줌인 17로 설정        CameraUpdate cameraUpdate = CameraUpdateFactory.newLatLngZoom(latLng, 17);//실제 이동        if (map!=null) {            map.animateCamera(cameraUpdate);        }//마커옵션에 따라 마커 생성        if (map!=null) {            marker = map.addMarker(markerOption);        }//routePoint arraylist에 좌표값 추가        routePoints.add(latLng);        Log.i("marker", "routePoint.add" + routePoints.size());        //추가된 정보로 선그리기        drawPrimaryLinePath(routePoints);    }    private void drawPrimaryLinePath(ArrayList<LatLng> routePoints) {        //추가된 위치 데이터 정보로 polyline 그리기        if (map == null) {            return;        }        if (routePoints.size() < 2) {            return;        }        PolylineOptions options = new PolylineOptions();        options.color(Color.parseColor("#ff5027"));        options.width(15);        options.visible(true);        for (LatLng locRecorded : routePoints) {            options.add(new LatLng(locRecorded.latitude, locRecorded.longitude));        }        map.addPolyline(options);    }    @Override    protected void onResume() {        super.onResume();        isMapActivity=true;        registerReceiver();    }    @Override    protected void onPause() {        super.onPause();    }    @Override    protected void onStop() {        super.onStop();        isMapActivity=false;        unregisterReceiver(myReceiver);    }    private void registerReceiver(){        //Register BroadcastReceiver        //to receive event from our service        myReceiver = new MyReceiver();        IntentFilter intentFilter = new IntentFilter();        intentFilter.addAction(Netty_DuriHandler.SENDMESAGGE);        registerReceiver(myReceiver, intentFilter);    }    class heartThread extends Thread{        @Override        public void run() {            super.run();            while (isMapActivity == true){                try {                    Thread.sleep(3500);                } catch (InterruptedException e) {                    e.printStackTrace();                }                new Handler(Looper.getMainLooper()).post(new Runnable() {                    @Override                    public void run() {                        int init = 80;                        Random generator = new Random();                        int num1= generator.nextInt(7) - 3;                        int heartzzz = init+num1;                        heartheart.setText(String.valueOf(heartzzz));                    }                });            }        }    }    private class MyReceiver extends BroadcastReceiver {        @Override        public void onReceive(Context arg0, Intent arg1) {            //verify if the extra var exist            System.out.println(arg1.hasExtra("message")); // true or false            //another example...            System.out.println(arg1.getExtras().containsKey("message")); // true or false            //if var exist only print or do some stuff            if (arg1.hasExtra("message")) {                //do what you want to                System.out.println(arg1.getStringExtra("message"));                String[] strings = arg1.getStringExtra("message").split(String.valueOf(SplashActivity.ascii));                LatLng latLng = new LatLng(Double.parseDouble(strings[0]), Double.parseDouble(strings[1]));                display(latLng);            }        }    }}